/*******************************************************************************
 * Copyright (c) 2017, 2018 IBM Corp. and others
 *
 * This program and the accompanying materials are made available under
 * the terms of the Eclipse Public License 2.0 which accompanies this
 * distribution and is available at https://www.eclipse.org/legal/epl-2.0/
 * or the Apache License, Version 2.0 which accompanies this distribution and
 * is available at https://www.apache.org/licenses/LICENSE-2.0.
 *
 * This Source Code may also be made available under the following
 * Secondary Licenses when the conditions for such availability set
 * forth in the Eclipse Public License, v. 2.0 are satisfied: GNU
 * General Public License, version 2 with the GNU Classpath
 * Exception [1] and GNU General Public License, version 2 with the
 * OpenJDK Assembly Exception [2].
 *
 * [1] https://www.gnu.org/software/classpath/license.html
 * [2] http://openjdk.java.net/legal/assembly-exception.html
 *
 * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception
 *******************************************************************************/

pipeline {
    agent {label 'master'}

    environment {
        GITHUB_REPO = 'https://github.com/eclipse/openj9-website.git'
        ECLIPSE_REPO = 'ssh://genie.openj9@git.eclipse.org:29418/www.eclipse.org/openj9.git'
        BRANCH = 'staging'
    }

    stages {
        stage('Clone') {
            steps {
                timestamps {
                    dir('github_repo') {
                        git url: GITHUB_REPO
                        sh 'git fetch --tags --progress origin +refs/pull/*:refs/remotes/origin/pr/*'
                        sh "git checkout ${sha1}"
                    }
                    dir('staging_repo') {
                        git branch: BRANCH, url: ECLIPSE_REPO
                    }
                }
            }
        }

        stage('Stage') {
            steps {
                timestamps {
                    // This process is slightly convoluted as we don't have rights to force push the staging brach.
                    // Instead we generate a new commit based on the diff of the Staging branch vs PR content.
                    // This makes the history of the staging branch very different from master and it will never
                    // be merged back into master.
                    // The staging branch is more of a 'preview' branch rather than a stage->deploy setup.
                    // - Copy on disk Github repo (PR content) over Eclipse repo.
                    // - Stage all changes, generate commit & push to staging branch
                    dir('staging_repo') {
                        sh 'rm -rf * .gitignore'
                        sh "cp -r ${WORKSPACE}/github_repo/* ."
                        sh "cp -r ${WORKSPACE}/github_repo/.gitignore ."
                        sh 'git status'
                        sh 'git add -A'
                        sh 'git status'
                        sh 'git commit -m "Generated from commit: ${sha1}"'
                        sh 'git status'
                        sh "git push origin ${BRANCH}"
                        sh "git diff origin/${BRANCH}..origin/master"
                    }
                }
            }
        }
    }
}
